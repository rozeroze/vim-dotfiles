*timeformat.jax*      format of strftime()

Author: rozeroze <rosettastone1886@gmail.com>
License: MIT

==============================================================================
INTRODUCTION                                                   *timeformat*

  vim-script関数 strftime() に引数として渡される {format} について

    eval.jax L:7103 |strftime()| 一部抜粋
>
    strftime({format} [, {time}])
      {format} に従って日付や時間がフォーマットされた文字列を返す。
      受付可能な文字列 {format} は使用するシステムに依存するので、
      ポータブルとは言えない。フォーマットについてはCの関数 strftime()
      のマニュアルを参照。結果は最大80文字に制限される。
      この関数はどのシステムでも利用できるとは限らない。利用できるか
      チェックするには次のようにする:
        :if exists("*strftime")
<

                                                            *strftime-format*
                                                            *strftime_format*
    {format} は使用するシステムに依存するとはいえ、 help がないよりは
    あったほうがよいので、下にCのstrftime()の書式文字列を記載する。

	書式	置き換わる文字列

	%a	ロケールの簡略化された曜日の名前
			[月火水木金土日]

	%A	ロケールの簡略化されていない曜日の名前
			[月火水木金土日]曜日

	%b	ロケールの簡略化された月の名前
			1 ～ 12

	%B	ロケールの簡略化されていない月の名前
			1 ～ 12 月

	%c	ロケールの適切な日付と時刻
			yyyy/mm/dd hh:mm:ss
			2018/10/30 12:30:00

	%C	西暦の年を 100 で除算し整数で切り捨てた 10 進数 (00 ～ 99)
			BUG: 何も返ってこない KaoriYa版8.0 1-596 にて確認

	%d	10 進数で月の日 (01～31)
			e.g. 6日 -> '06'

	%D	"%m/%d/%y"と等価な日付表現
			BUG: 何も返ってこない KaoriYa版8.0 1-596 にて確認

	%e	10 進数で月の日 ( 1～31) 1 桁の場合は空白文字を前につける
			BUG: 何も返ってこない KaoriYa版8.0 1-596 にて確認

	%F	"%Y-%m-%d" と等価な日付表現
			<C-r>=strftime('%F')

	%g	暦週に基づく年の下 2 桁を表す 10 進数 (00 ～ 99)
			<C-r>=strftime('%g')

	%G	暦週に基づく年を表す 10 進数 (例.2007)
			<C-r>=strftime('%G')

	%h	"%b" と等価な表現
			<C-r>=strftime('%h')

	%H	24 時間制の時間を表す 10 進数 (00 ～ 23)
			<C-r>=strftime('%H')

	%I	12 時間制の時間を表す 10 進数 (01 ～ 12)
			<C-r>=strftime('%I')

	%j	年間通した日(001 ～ 366）
			<C-r>=strftime('%j')

	%m	月(01 ～ 12)
			<C-r>=strftime('%m')

	%M	分(00 ～ 59)
			<C-r>=strftime('%M')

	%n	改行文字
			<C-r>=strftime('%n')

	%p	ロケールの 12 時間制に関連した午前/午後の表記 (AM / PM)
			<C-r>=strftime('%p')

	%r	ロケールの 12 時間制での時刻表現
			<C-r>=strftime('%r')

	%S	秒 (00 ～ 60)
			<C-r>=strftime('%S')

	%t	水平タブ文字
			<C-r>=strftime('%t')

	%T	"%H:%M:%S" に等価な時刻表現
			<C-r>=strftime('%T')

	%u	暦週の中の日の序数 (1 ～ 7) 月曜日は 1
			<C-r>=strftime('%u')

	%U	年間の経過した週の数 (最初の日曜日を 1 日目としてカウント)
			<C-r>=strftime('%U')

	%V	暦週の序数 (01 ～ 53)
			<C-r>=strftime('%V')

	%w	曜日 (日曜日を 0 として 0 ～ 6)
			<C-r>=strftime('%w')

	%W	年間の経過した週の数 (最初の月曜日を 1 日目としてカウント)
			<C-r>=strftime('%W')

	%x	ロケールの適切な日付表現 (yy/MM/dd)
			<C-r>=strftime('%x')

	%X	ロケールの適切な時刻 (hh:mi AM/PM)
			<C-r>=strftime('%X')

	%y	西暦の下 2 桁の年 (yy)
			<C-r>=strftime('%y')

	%Y	西暦 (yyyy)
			<C-r>=strftime('%Y')

	%z	UTCからの時差
			<C-r>=strftime('%z')

	%Z	タイムゾーンの名前
			<C-r>=strftime('%Z')

	%%	%
			<C-r>=strftime('%%')

	%Ec	ロケールでの日付及び時刻の代替表現
			<C-r>=strftime('%Ec')

	%EC	ロケールでの代替表現である年号
			<C-r>=strftime('%EC')

	%Ex	ロケールでの日付の代替表現
			<C-r>=strftime('%Ex')

	%EX	ロケールでの時刻の代替表現
			<C-r>=strftime('%EX')

	%Ey	ロケールでの代替表現である %EC (年号) に対応した年
			<C-r>=strftime('%Ey')

	%EY	ロケールでの年の完全形式の代替表現
			<C-r>=strftime('%EY')

	%Od	ロケールでの代替数値記号を使った日の表現 (必要に応じて 0 を前置)
			<C-r>=strftime('%Od')

	%Oe	ロケールでの代替数値記号を使った日の表現 (必要に応じて空白を前置)
			<C-r>=strftime('%Oe')

	%OH	ロケールでの代替数値記号を使った時間 (24 時間制)
			<C-r>=strftime('%OH')

	%OI	ロケールでの代替数値記号を使った時間 (12 時間制)
			<C-r>=strftime('%OI')

	%Om	ロケールでの代替数値記号を使った月
			<C-r>=strftime('%Om')

	%OM	ロケールでの代替数値記号を使った分
			<C-r>=strftime('%OM')

	%OS	ロケールでの代替数値記号を使った秒
			<C-r>=strftime('%OS')

	%Ou	ロケールでの代替表現による暦週の中の序数 (月曜日が 1)
			<C-r>=strftime('%Ou')

	%OU	ロケールでの代替数値記号を使った週番号
			<C-r>=strftime('%OU')

	%OV	ロケールでの代替数値記号を使った暦週の序数
			<C-r>=strftime('%OV')

	%Ow	ロケールでの代替数値記号を使った曜日
			<C-r>=strftime('%Ow')

	%OW	ロケールでの代替数値記号を使った年の週番号
			<C-r>=strftime('%OW')

	%Oy	ロケールでの代替数値記号を使った西暦の下2桁の年
			<C-r>=strftime('%Oy')


==============================================================================
vim:tw=78:ts=8:ft=help:norl:
